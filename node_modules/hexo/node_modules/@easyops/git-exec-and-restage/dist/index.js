#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CliError = undefined;

let main = (() => {
  var _ref = _asyncToGenerator(function* (argv = []) {
    const { command, commandArgs, files } = parseArgs(argv);
    if (!command) {
      throw new _CliError2.default("Usage: git-exec-and-restage <command> [...command-args --] [...files]");
    }
    const fullyStaged = yield (0, _gitUtils.getFullyStaged)(files);
    yield (0, _crossSpawnPromise2.default)(command, commandArgs.concat(files), { stdio: "inherit" });
    if (fullyStaged.length) {
      yield (0, _gitUtils.stageFiles)(fullyStaged);
    }
  });

  return function main() {
    return _ref.apply(this, arguments);
  };
})();

exports.parseArgs = parseArgs;

var _crossSpawnPromise = require("cross-spawn-promise");

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _CliError = require("./CliError");

var _CliError2 = _interopRequireDefault(_CliError);

var _gitUtils = require("./gitUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.CliError = _CliError2.default;


const ARG_SEPARATOR = "--";

function parseArgs(argv) {
  const separatorPos = argv.lastIndexOf(ARG_SEPARATOR);
  if (separatorPos === -1) {
    const [command, ...files] = argv;
    return { command, commandArgs: [], files };
  }
  const command = argv[0];
  const commandArgs = argv.slice(1, separatorPos).filter(s => s !== ARG_SEPARATOR);
  const files = argv.slice(separatorPos + 1).filter(s => s !== ARG_SEPARATOR);
  return { command, commandArgs, files };
}

exports.default = main;

/* istanbul ignore next: not captured by tests */

if (require.main === module) {
  require("./polyfills");
  main(process.argv.slice(2)).catch(e => {
    if (e instanceof _CliError2.default) {
      process.stderr.write(e.message + "\n");
    } else {
      process.stderr.write(e.stack || e);
    }
    process.exit(64);
  });
}