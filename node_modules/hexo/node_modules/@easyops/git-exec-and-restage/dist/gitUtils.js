"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stageFiles = exports.getFullyStaged = exports.getAllStaged = undefined;

let getAllStagedFromRevision = (() => {
  var _ref = _asyncToGenerator(function* (revision) {
    const diffOut = (yield (0, _crossSpawnPromise2.default)("git", ["diff-index", "--cached", "--name-only", "--diff-filter=ACDMRTUXB", revision, "--"], {
      encoding: "utf8"
    })) || "";
    return diffOut.split("\n").filter(function (s) {
      return s !== "";
    });
  });

  return function getAllStagedFromRevision(_x) {
    return _ref.apply(this, arguments);
  };
})();

let getAllStaged = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    try {
      return yield getAllStagedFromRevision("HEAD");
    } catch (e) {
      /* istanbul ignore else: simple exception passthrough */
      if (e.stderr && e.stderr.toString().indexOf("fatal: bad revision 'HEAD'") !== -1) {
        return yield getAllStagedFromRevision(GIT_EMPTY_HASH);
      }
      /* istanbul ignore next: simple exception passthrough */
      throw e;
    }
  });

  return function getAllStaged() {
    return _ref2.apply(this, arguments);
  };
})();

let getFullyStaged = (() => {
  var _ref3 = _asyncToGenerator(function* (
  /* istanbul ignore next: convenience default */
  files = []) {
    if (!files.length) {
      files = yield getAllStaged();
    }
    const diffOut = (yield (0, _crossSpawnPromise2.default)("git", ["diff", "--name-only", "--diff-filter=ACDMRTUXB", ...files.map(function (filename) {
      return ensureRelativePath(filename);
    })], {
      encoding: "utf8"
    })) || "";
    const notFullyStaged = new Set(diffOut.split("\n").filter(function (s) {
      return s !== "";
    }).map(function (filename) {
      return _path2.default.resolve(process.cwd(), filename);
    }));
    return files.filter(function (file) {
      return !notFullyStaged.has(_path2.default.resolve(process.cwd(), file));
    });
  });

  return function getFullyStaged() {
    return _ref3.apply(this, arguments);
  };
})();

let stageFiles = (() => {
  var _ref4 = _asyncToGenerator(function* (
  /* istanbul ignore next: convenience default */
  files = []) {
    yield (0, _crossSpawnPromise2.default)("git", ["add", ...files.map(function (filename) {
      return ensureRelativePath(filename);
    })], { stdio: "inherit" });
  });

  return function stageFiles() {
    return _ref4.apply(this, arguments);
  };
})();

var _crossSpawnPromise = require("cross-spawn-promise");

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function ensureRelativePath(s) {
  if (_path2.default.isAbsolute(s)) {
    return _path2.default.relative(process.cwd(), s);
  }
  return s;
}

const GIT_EMPTY_HASH = "4b825dc642cb6eb9a060e54bf8d69288fbee4904";

exports.getAllStaged = getAllStaged;
exports.getFullyStaged = getFullyStaged;
exports.stageFiles = stageFiles;